# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import mySum.helloworld_pb2 as helloworld__pb2


class AddServiceStub(object):
  """define a service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.myAdd = channel.unary_unary(
        '/rpc_package.AddService/myAdd',
        request_serializer=helloworld__pb2.DataRequest.SerializeToString,
        response_deserializer=helloworld__pb2.DataReply.FromString,
        )


class AddServiceServicer(object):
  """define a service
  """

  def myAdd(self, request, context):
    """define the interface and data type
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AddServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'myAdd': grpc.unary_unary_rpc_method_handler(
          servicer.myAdd,
          request_deserializer=helloworld__pb2.DataRequest.FromString,
          response_serializer=helloworld__pb2.DataReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rpc_package.AddService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
